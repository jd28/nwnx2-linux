#ifndef _CNWSCREATURESTATS_H_
#define _CNWSCREATURESTATS_H_
#include "nwndef.h"
#include "CExoArrayList.h"
#include "CExoString.h"
#include "CExoLocString.h"
#include "CResRef.h"
#include "CNWSCreatureStats_ClassInfo.h"

class CNWSCreatureStats
{
public:
    void AddExperience(unsigned long);
    void AddFeat(unsigned short);
    void AddKnownSpell(unsigned char, unsigned long);
    int AddSpellLikeAbilityToList(unsigned long, int, unsigned char);
    void AdjustAlignment(unsigned char, short, unsigned long);
    void AdjustSpellUsesPerDay();
    int AutoMemorizeSpells(int);
    int CalcLevelUpNumberFeats(unsigned char, unsigned char, unsigned char &, unsigned char &);
    char CalcStatModifier(unsigned char);
    int CanChooseFeat(unsigned short, unsigned char, unsigned char, CExoArrayList<unsigned short> *);
    int CanLevelUp();
    int CheckSpellSuitability(int, CNWSpell *, int, int, int, int, int, int, unsigned char &, int);
    int ClearFeats();
    void ClearMemorizedSpellSlot(unsigned char, unsigned char, unsigned char);
    void ComputeFeatBonuses(CExoArrayList<unsigned short> *, int, int);
    unsigned char ComputeNumberKnownSpellsLeft(unsigned char, unsigned char);
    int ConfirmDomainSpell(unsigned char, unsigned char, unsigned long);
    void DecrementFeatRemainingUses(unsigned short);
    void DecrementSpellsPerDayLeft(unsigned char, unsigned char);
    int FeatAcquired(unsigned short, CExoArrayList<unsigned short> *, int);
    int FeatRequirementsMetAfterLevelUp(unsigned short, CNWLevelStats *, unsigned char);
    int FeatRequirementsMet(unsigned short, CExoArrayList<unsigned short> *);
    char GetACNaturalBase(int);
    int GetAlignmentString();
    short GetArmorClassVersus(CNWSCreature *, int);
    int GetAttackModifierVersus(CNWSCreature *);
    unsigned char GetAttacksPerRound();
    int GetBaseAttackBonus(int);
    char GetBaseFortSavingThrow();
    char GetBaseReflexSavingThrow();
    char GetBaseWillSavingThrow();
    unsigned short GetBonusFeat(unsigned short);
    unsigned char GetCHAStat();
    unsigned char GetCONStat();
    int GetCanUseRelatedCategory(int, int);
    int GetCanUseSkillAfterLevelUp(unsigned short, CNWLevelStats *);
    int GetCanUseSkill(unsigned char);
    int GetCasterLevel(unsigned char);
    CNWSCreatureStats_ClassInfo * GetClassInfo(unsigned char);
    unsigned char GetClassLevel(unsigned char, int);
    unsigned char GetClassNegativeLevels(unsigned char);
    int GetClassString(unsigned char);
    unsigned char GetClass(unsigned char);
    unsigned char GetCreatureDamageDice(unsigned char);
    unsigned char GetCreatureDamageDie(unsigned char);
    int GetCreatureHasTalent(int, int, unsigned char);
    int GetCreatureTalentRandomFeat(int, int, int &, int &, unsigned char &);
    int GetCreatureTalentRandomKnownSpell(int, int, int &, int &, unsigned char &, int);
    int GetCreatureTalentRandomMemorisedSpell(int, int, int &, int &, unsigned char &, int, unsigned char &);
    int GetCreatureTalentRandomSkill(int, int, int &, int &, unsigned char &);
    int GetCreatureTalentRandomSpellFromItem(int, int, int &, int &, unsigned char &, unsigned long &, int &);
    int GetCreatureTalentRandomSpellLikeAbility(int, int, int &, int &, unsigned char &, unsigned char &);
    int GetCreatureTalentRandomSpell(int, int, int &, int &, unsigned char &, unsigned char &);
    int GetCreatureTalentRandom(int, int, int &, int &, unsigned char &, unsigned long &, int &, unsigned char &, unsigned char &);
    int GetCriticalHitMultiplier(int);
    int GetCriticalHitRoll(int);
    char GetDEXMod(int);
    unsigned char GetDEXStat();
    int GetDamageBonus(CNWSCreature *, int);
    int GetDamageRoll(CNWSObject *, int, int, int, int, int);
    unsigned char GetDomain1(unsigned char);
    unsigned char GetDomain2(unsigned char);
    int GetEffectImmunity(unsigned char, CNWSCreature *);
    unsigned char GetEffectiveCRForPotentialLevel();
    int GetEpicWeaponDevastatingCritical(CNWSItem *);
    int GetEpicWeaponFocus(CNWSItem *);
    int GetEpicWeaponOverwhelmingCritical(CNWSItem *);
    int GetEpicWeaponSpecialization(CNWSItem *);
    unsigned long GetExpNeededForLevelUp();
    int GetFavoredEnemyBonus(CNWSCreature *);
    unsigned char GetFeatRemainingUses(unsigned short);
    unsigned char GetFeatSourceClass(unsigned short);
    unsigned char GetFeatTotalUses(unsigned short);
    unsigned short GetFeat(unsigned short);
    char GetFortSavingThrow(int);
    CExoString GetFullName();
    int GetHasLostClassAbilities(unsigned char);
    int GetHasSilencedSpell(unsigned long);
    int GetHasStilledSpell(unsigned long);
    unsigned long GetHighestLevelKnown();
    unsigned short GetHighestLevelOfFeat(unsigned short);
    unsigned char GetHitDie(unsigned char, unsigned char);
    unsigned char GetINTStat();
    int GetIsClassAvailable(unsigned char);
    unsigned char GetIsClass(unsigned char);
    int GetIsDomainSpell(unsigned char, unsigned char, unsigned char);
    int GetIsEpitomeOfAlignment();
    int GetIsInKnownSpellList(unsigned char, unsigned long);
    int GetIsInSpellLikeAbilityList(unsigned long);
    int GetIsWeaponOfChoice(unsigned long);
    unsigned long GetKnownSpell(unsigned char, unsigned char, unsigned char);
    int GetLargePortrait();
    CNWLevelStats * GetLevelStats(unsigned char);
    unsigned char GetLevel(int);
    int GetMeetsPrestigeClassRequirements(CNWClass *);
    int GetMeleeAttackBonus(int, int, int);
    int GetMeleeDamageBonus(int, unsigned char);
    unsigned char GetMemorizedSpellInSlotMetaType(unsigned char, unsigned char, unsigned char);
    unsigned char GetMemorizedSpellInSlotReady(unsigned char, unsigned char, unsigned char);
    unsigned long GetMemorizedSpellInSlot(unsigned char, unsigned char, unsigned char);
    unsigned char GetMemorizedSpellReadyCount(unsigned char, unsigned long, unsigned char *, unsigned char *);
    unsigned char GetMemorizedSpellReadyCount(unsigned char, unsigned long, unsigned char);
    int GetMemorizedSpellReadyCount(unsigned long);
    int GetNumLevelsOfClass(unsigned char);
    int GetNumLevelsOfClass(unsigned char, int);
    unsigned short GetNumberKnownSpells(unsigned char, unsigned char);
    unsigned char GetNumberMemorizedSpellSlots(unsigned char, unsigned char);
    unsigned char GetPotentialLevel();
    unsigned char GetPrimaryMod(unsigned char);
    int GetRaceString();
    int GetRangedAttackBonus(int, int);
    int GetRangedDamageBonus();
    char GetReflexSavingThrow(int);
    unsigned char GetSTRStat();
    unsigned char GetSchool(unsigned char);
    unsigned char GetSimpleAlignmentGoodEvil();
    unsigned char GetSimpleAlignmentLawChaos();
    char GetSkillRank(unsigned char, CNWSObject *, int);
    int GetSmallPortrait();
    unsigned char GetSpellFailure(unsigned char);
    unsigned char GetSpellGainWithBonusAfterLevelUp(unsigned char, unsigned char, CNWLevelStats *, unsigned char, int);
    unsigned char GetSpellGainWithBonus(unsigned char, unsigned char);
    unsigned char GetSpellLikeAbilityCasterLevel(unsigned long);
    int GetSpellMinAbilityMet(unsigned char, unsigned char);
    char GetSpellResistance();
    unsigned char GetSpellUsesLeft(unsigned long, unsigned char, unsigned char, unsigned char);
    unsigned char GetSpellsOfLevelReady(unsigned char, unsigned char);
    unsigned char GetSpellsPerDayLeft(unsigned char, unsigned char);
    void GetStatBonusesFromFeats(CExoArrayList<unsigned short> *, int *, unsigned char);
    float GetStatById(int);
    int GetTag();
    char GetTotalACSkillMod();
    char GetTotalCHABonus();
    char GetTotalCONBonus();
    char GetTotalDEXBonus();
    char GetTotalINTBonus();
    int GetTotalNegativeLevels();
    char GetTotalSTRBonus();
    char GetTotalWISBonus();
    unsigned char GetUnarmedDamageDice();
    unsigned char GetUnarmedDamageDie();
    int GetUnarmedDamageRoll(CNWSObject *);
    int GetUseMonkAttackTables(int);
    unsigned char GetWISStat();
    int GetWeaponFinesse(CNWSItem *);
    int GetWeaponFocus(CNWSItem *);
    int GetWeaponImprovedCritical(CNWSItem *);
    int GetWeaponSpecialization(CNWSItem *);
    char GetWillSavingThrow(int);
    int HasFeat(unsigned short);
    void IncrementFeatRemainingUses(unsigned short);
    int IncrementSpellsPerDayLeft(unsigned char, unsigned char);
    void LevelDown(CNWLevelStats *);
    int LevelUpAutomatic(unsigned char, int, unsigned char);
    void LevelUp(CNWLevelStats *, unsigned char, unsigned char, unsigned char, int);
    int ModifyAlignment(short, short);
    void ReadSpellsFromGff(CResGFF *, CResStruct *, int);
    unsigned long ReadStatsFromGff(CResGFF *, CResStruct *, CNWSCreatureAppearanceInfo *, int, int, int);
    void ReadySpellLevel(unsigned char);
    void RemoveFeat(unsigned short);
    int RemoveKnownSpell(unsigned char, unsigned long);
    void ResetFeatRemainingUses();
    void ResetSpellLikeAbilities();
    int ResetSpellsPerDayLeft(unsigned char, unsigned char);
    int ResolveSpecialAttackAttackBonus(CNWSCreature *);
    int ResolveSpecialAttackDamageBonus(CNWSCreature *);
    void SaveClassInfo(CResGFF *, CResStruct *);
    void SaveStats(CResGFF *, CResStruct *);
    void SetArcaneSpellFailure(char);
    void SetCHABase(unsigned char);
    void SetCONBase(unsigned char, int);
    int SetClassLevel(unsigned char, unsigned char);
    void SetClassNegativeLevels(unsigned char, unsigned char);
    int SetClass(unsigned char, unsigned char);
    void SetDEXBase(unsigned char);
    int SetDomain1(unsigned char, unsigned char);
    int SetDomain2(unsigned char, unsigned char);
    void SetExperience(unsigned long, int);
    void SetFeatRemainingUses(unsigned short, unsigned char);
    int SetHasLostClassAbilities(unsigned char, int);
    void SetINTBase(unsigned char);
    int SetMemorizedSpellInSlotReady(unsigned char, unsigned char, unsigned char, int);
    int SetMemorizedSpellSlot(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char, int);
    void SetMovementRate(int);
    int SetNormalBonusFlags(unsigned short, int &, int &);
    void SetNumberBonusSpells(unsigned char, unsigned char, unsigned char);
    int SetNumberMemorizedSpellSlots(unsigned char, unsigned char, unsigned char);
    void SetSTRBase(unsigned char);
    int SetSchool(unsigned char, unsigned char);
    int SetSkillRank(unsigned char, char);
    void SetSpellFailure(unsigned char, unsigned char);
    int SetSpellLikeAbilityReady(unsigned long, int, unsigned char);
    void SetSpellResistancePenalty(char);
    void SetSpellResistance(char);
    void SetStatById(int, float);
    int SetTag(CExoString const &);
    void SetWISBase(unsigned char);
    int UnReadySpell(unsigned long, unsigned char, unsigned char, unsigned char);
    void UpdateCombatInformation();
    int UpdateLastStatsObject(unsigned long long, CNWCreatureStatsUpdate *);
    void UpdateNumberMemorizedSpellSlots();
    unsigned long ValidateLevelUp(CNWLevelStats *, unsigned char, unsigned char, unsigned char);
    ~CNWSCreatureStats();
    CNWSCreatureStats(CNWSCreature *);

    /* 0x0/0 */ CExoArrayList<unsigned short> Feats;
    /* 0x10/16 */ CExoArrayList<CFeatUseListEntry *> FeatUses;
    /* 0x18/16 */ CExoArrayList<unsigned short> FeatsFromEffects;
    /* 0x24/36 */ CNWSCreature *OriginalObject;
    /* 0x34/52 */ CExoArrayList<CNWLevelStats *> LevelStats;
    /* 0x34/52 */ CExoLocString FirstName;
    /* 0x3C/60 */ CExoLocString LastName;
    /* 0x44/68 */ CResRef Conversation;
    /* 0x54/84 */ unsigned long ConvInterruptable;
    /* 0x58/88 */ CExoLocString Description;
    /* 0x60/96 */ CExoString DescriptionOverride;
    /* 0x68/104 */ unsigned long Age;
    /* 0x6C/108 */ unsigned long Gender;
    /* 0x70/112 */ unsigned long XP;
    /* 0x74/116 */ unsigned long IsPC;
    /* 0x78/120 */ unsigned long IsDM;
    /* 0x7C/124 */ unsigned long field_7C;
    /* 0x80/128 */ unsigned long field_80;
    /* 0x84/132 */ unsigned long AIDisabled;
    /* 0x88/136 */ unsigned long field_88;
    /* 0x8C/140 */ unsigned long LevelupClass;
    /* 0x90/144 */ unsigned long FactionID;
    /* 0x94/148 */ unsigned long FactionOriginal;
    /* 0x98/152 */ unsigned long PreDominationFactionId;
    /* 0x9C/156 */ float ChallengeRating;
    /* 0xA0/160 */ char StartingPackage;
    /* 0xA1/161 */ char ClassesCount;
    /* 0xA2/162 */ char field_A2;
    /* 0xA3/163 */ char field_A3;
    /* 0xA4/164 */ CNWSCreatureStats_ClassInfo ClassInfo[3];
    /* 0x3EC/164 */ unsigned short Race;
    /* 0x3F0/1008 */ char rsvd5[2];
    /* 0x3F0/1008 */ CExoString Subrace;
    /* 0x3F8/1016 */ unsigned char Str;
    /* 0x3F9/1017 */ char StrMod;
    /* 0x3FA/1018 */ unsigned char Dex;
    /* 0x3FB/1019 */ char DexMod;
    /* 0x3FC/1020 */ unsigned char Con;
    /* 0x3FD/1021 */ char ConMod;
    /* 0x3FE/1022 */ unsigned char Int;
    /* 0x3FF/1023 */ char IntMod;
    /* 0x400/1024 */ unsigned char Wis;
    /* 0x401/1025 */ char WisMod;
    /* 0x402/1026 */ unsigned char Cha;
    /* 0x403/1027 */ char ChaMod;
    /* 0x404/1028 */ unsigned char ACNaturalBase;
    /* 0x405/1029 */ unsigned char ACArmorBase;
    /* 0x406/1030 */ unsigned char ACShieldBase;
    /* 0x407/1031 */ unsigned char ACArmorBonus;
    /* 0x408/1032 */ unsigned char ACArmorPenalty;
    /* 0x409/1033 */ unsigned char ACDeflectionBonus;
    /* 0x40A/1034 */ unsigned char ACDeflectionPenalty;
    /* 0x40B/1035 */ unsigned char ACShieldBonus;
    /* 0x40C/1036 */ unsigned char ACShieldPenalty;
    /* 0x40D/1037 */ unsigned char ACNaturalBonus;
    /* 0x40E/1038 */ unsigned char ACNaturalPenalty;
    /* 0x40F/1039 */ unsigned char ACDodgeBonus;
    /* 0x410/1040 */ unsigned char ACDodgePenalty;
    /* 0x411/1041 */ unsigned char OverrideBAB;
    /* 0x412/1042 */ unsigned char OverrideAttacks;
    /* 0x413/1043 */ unsigned char field_413;
    /* 0x414/1044 */ unsigned long field_414;
    /* 0x418/1048 */ unsigned long field_418;
    /* 0x41C/1052 */ unsigned long field_41C;
    /* 0x420/1056 */ unsigned long field_420;
    /* 0x424/1060 */ unsigned long field_424;
    /* 0x428/1064 */ CCombatInformation* CombatInformation;
    /* 0x42C/1068 */ unsigned long field_42C;
    /* 0x430/1072 */ unsigned long field_430;
    /* 0x434/1076 */ unsigned long field_434;
    /* 0x438/1080 */ unsigned long field_438;
    /* 0x43C/1084 */ CExoArrayList<CNWSStats_SpellLikeAbility> SpellLikeAbilities;
    /* 0x448/1096 */ unsigned long field_448;
    /* 0x44C/1100 */ unsigned long field_44C;
    /* 0x450/1104 */ unsigned long field_450;
    /* 0x454/1108 */ unsigned long field_454;
    /* 0x458/1112 */ unsigned long field_458;
    /* 0x45C/1116 */ unsigned long field_45C;
    /* 0x460/1120 */ unsigned long field_460;
    /* 0x464/1124 */ unsigned long field_464;
    /* 0x468/1128 */ unsigned long field_468;
    /* 0x46C/1132 */ unsigned long field_46C;
    /* 0x470/1136 */ unsigned long field_470;
    /* 0x474/1140 */ unsigned short field_474;
    /* 0x476/1142 */ unsigned short SkillPoints;
    /* 0x478/1144 */ unsigned char* Skills;
    /* 0x47C/1148 */ unsigned long field_47C;
    /* 0x480/1152 */ unsigned long field_480;
    /* 0x484/1156 */ unsigned long field_484;
    /* 0x488/1160 */ unsigned long field_488;
    /* 0x48C/1164 */ unsigned long field_48C;
    /* 0x490/1168 */ unsigned long field_490;
    /* 0x494/1172 */ unsigned char ColorTattoos[2];
    /* 0x496/1174 */ unsigned short Appearance;
    /* 0x498/1176 */ unsigned char Phenotype;
    /* 0x499/1177 */ unsigned char AppearanceHead;
    /* 0x49A/1178 */ char ArmorPart_RFoot;
    /* 0x49B/1179 */ char BodyPart_LFoot;
    /* 0x49C/1180 */ char BodyPart_RShin;
    /* 0x49D/1181 */ char BodyPart_LShin;
    /* 0x49E/1182 */ char BodyPart_LThigh;
    /* 0x49F/1183 */ char BodyPart_RThigh;
    /* 0x4A0/1184 */ char BodyPart_Pelvis;
    /* 0x4A1/1185 */ char BodyPart_Torso;
    /* 0x4A2/1186 */ char BodyPart_Belt;
    /* 0x4A3/1187 */ char BodyPart_Neck;
    /* 0x4A4/1188 */ char BodyPart_RFArm;
    /* 0x4A5/1189 */ char BodyPart_LFArm;
    /* 0x4A6/1190 */ char BodyPart_RBicep;
    /* 0x4A7/1191 */ char BodyPart_LBicep;
    /* 0x4A8/1192 */ char BodyPart_RShoul;
    /* 0x4A9/1193 */ char BodyPart_LShoul;
    /* 0x4AA/1194 */ char BodyPart_RHand;
    /* 0x4AB/1195 */ char BodyPart_LHand;
    /* 0x4AC/1196 */ unsigned char field_4AC;
    /* 0x4AD/1197 */ unsigned char TailOld;
    /* 0x4AE/1198 */ unsigned char WingsOld;
    /* 0x4AF/1199 */ unsigned char field_4AF;
    /* 0x4B0/1200 */ unsigned long Tail;
    /* 0x4B4/1204 */ unsigned long Wings;
    /* 0x4B8/1208 */ unsigned long MovementRate;
    /* 0x4BC/1212 */ unsigned char rsvd7[8];
    /* 0x4C4/1220 */ char Saves[3];
    /* 0x4C7/1223 */ unsigned char field_4C7;
    /* 0x4C8/1224 */ unsigned long AnimalCompanionType;
    /* 0x4CC/1228 */ unsigned long FamiliarType;
    /* 0x4D0/1232 */ CExoString AnimalCompanionName;
    /* 0x4D8/1240 */ CExoString FamiliarName;
    /* 0x4E0/1248 */ CExoString Deity;
};

static_assert_size(CNWSCreatureStats, 0x4e8);

#endif
